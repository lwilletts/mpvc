#!/usr/bin/env sh
#
# @file mpvc-installer
# @description mpvc installer
# @author gmt4 <gmt4 at github.com> (c) Copyright 2022 GPLv2+
# @url github.com/gmt4/mpvc
# SPDX-License-Identifier: GPL-2.0-or-later
#

PROGNAME=${0##*/}
PROGVERSION="v1.7"
PROGAUTHOR=gmt4
PROGURL="https://github.com/gmt4/mpvc"

set -euf

SHELL="${SHELL:-/bin/sh}"
PREFIX="${PREFIX:-/usr/local}"
BINDIR="${BINDIR:-$PREFIX/bin}"
DOCDIR="${DOCDIR:-$PREFIX/docs}"
LICDIR="${LICDIR:-$PREFIX/licenses}"

MPV_CONFDIR="${MPV_CONFIGDIR:-$HOME/.config/mpv}"
MPVC_CONFIG_DIR="${MPVC_CONFIGDIR:-$HOME/.config/mpvc}"

DOCS="README.md docs/mpv.conf docs/logbook.html"
LICENSES="LICENSE.md"
SCRIPT="mpvc extras/mpvc-tui extras/mpvc-fzf extras/mpvc-cut extras/mpvc-chapter extras/mpvc-mpris extras/mpvc-equalizer extras/mpvc-web extras/mpvc-autostart extras/mpvc-installer"

MPV_CONFIG="docs/mpv.conf"
MPVC_CONFIG="docs/mpvc.conf docs/yt-dlp.conf"

mpvc_config()
{
    mkdir -p "$MPV_CONFDIR/scripts/"
    echo "Fetching docs/mpv.conf from $PROGURL"
    for config in ${MPV_CONFIG};
    do
        file="$MPV_CONFDIR/${config##*/}"
        url="$PROGURL/raw/master/$config"
        echo "Fetch $file"
        if [ -e "$file" ]; then
            echo "$PROGNAME: $file exists. Not overwriting."
        else
            curl -fsSL -o "$file" "$url"
        fi
    done

    mkdir -p "$MPVC_CONFIG_DIR"
    echo "Fetching $MPVC_CONFIG from $PROGURL"
    for config in $MPVC_CONFIG;
    do
        file="$MPVC_CONFIG_DIR/${config##*/}"
        url="$PROGURL/raw/master/$config"
        echo "Fetch $file"
        if [ -e "$file" ]; then
            echo "$PROGNAME: $file exists. Not overwriting."
        else
            curl -fsSL -o "$file" "$url"
        fi
    done

    for bin in "yt-dlp"
    do
        file="$BINDIR/$bin"
        echo "Fetch $file"
        if [ -e "$file" ]; then
            echo "$PROGNAME: $file exists. Not overwriting."
        else
            curl -fsSL -o "$file" "https://github.com/$bin/$bin/releases/latest/download/$bin"
            chmod a+rx "$file"
        fi
    done
}

mpvc_fetch()
{
    mkdir -p "$BINDIR"
    echo "Fetching mpvc from $PROGURL"
    for script in $SCRIPT;
    do
        file="$BINDIR/${script##*/}"
        url="$PROGURL/raw/master/$script"
        echo "Fetch $file"
        #if [ -e "$file" ]; then echo "$PROGNAME: $file exists, overwriting."; fi
        curl -fsSL -o "$file" "$url"
        chmod u+x "$file"
    done
}

mpvc_docs()
{
    mkdir -p "$DOCDIR"
    for doc in ${DOCS};
    do
        install -Dvm640 "$(pwd)/$doc" "$DOCDIR";
    done
}

mpvc_licenses()
{
    mkdir -p "$LICDIR"
    for license in ${LICENSES};
    do
        install -Dvm644 "$(pwd)/$license" "$LICDIR";
    done
}

mpvc_link()
{
    mkdir -p "$BINDIR"
    if ln -v 2>&1 | grep -q 'ln: unknown option'; then lnops=-sfn; else lnops=-sfnv; fi
    for f in $SCRIPT;
    do
        ln "$lnops" "$(pwd)/$f" "$BINDIR";
    done
}

mpvc_install()
{
    echo 'Installing mpvc...'
    mkdir -p "$BINDIR"
    for script in $SCRIPT;
    do
        install -Dvm755 "$(pwd)/$script" "$BINDIR";
    done
}

mpvc_uninstall()
{
    echo 'Un-installing mpvc...'
    for script in $SCRIPT;
    do
        rm -v "$BINDIR/${script##*/}";
    done
}

mpvc_check_requirements()
{
    # attempt at listing packages required by mpvc & extras/ to work
    echo "# Checking required deps:"
    for cmd in sh mpv fzf socat awk sed; do
        command -v "$cmd" | sed 's/^/  /' || echo "$PROGNAME: Error: No $cmd found. Install to continue"
    done
    # recommened, and good to have, but not required
    echo "# Checking recommended deps:"
    for cmd in curl rlwrap notify-send jq yt-dlp; do
        if command -v "$cmd" | sed 's/^/  /'; then
            $cmd --version | awk 'NR==1 { print "    "$1,$2 }'
        else
            echo "$PROGNAME: Warning: No $cmd found, is recommended, but not required"
        fi
    done
}

mpvc_check_update()
{
    master=$(curl -fsSL "$PROGURL/raw/master/extras/$PROGNAME" |
        awk '/^PROGVERSION=/ { gsub("PROGVERSION=",""); gsub("\\x22",""); print}'
    )

    if [ "$PROGVERSION" = "$master" ]
    then
        echo "$PROGNAME: Not-Found new version at $PROGURL (latest: $master)"
    else
        echo "$PROGNAME: Found new version at $PROGURL (latest: $master)"
    fi
}

mpvc_version()
{
    echo "usage: $PROGNAME args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL"
}

usage()
{
    cat <<EOF
usage: $PROGNAME args # @version $PROGVERSION (c) $PROGAUTHOR $PROGURL
  check-update   : Check for updates
  check-reqs     : Check for required packages
  config         : Fetch mpv config
  config-user    : Fetch mpv config to BINDIR=$HOME/bin
  config-sys     : Fetch mpv config to BINDIR=$PREFIX/bin
  fetch-user     : Fetch to BINDIR=$HOME/bin
  link-user      : Symlink to BINDIR=$HOME/bin
  install-user   : Install to BINDIR=$HOME/bin
  install-sys    : Install to BINDIR=$PREFIX/bin
  uninstall-sys  : Uninstall from BINDIR=$PREFIX/bin
  uninstall-user : Uninstall from BINDIR=$HOME/bin
*tips: If unsure where to start, start with: $PROGNAME fetch-user
EOF
    exit
}

main()
{
    if [ $# -lt 1 ]; then usage; fi

    # hack to force SHELL back to POSIX-sh when using non POSIX-sh shells (macOS)
    case "$SHELL" in *'zsh'|*'fish')
        echo "$PROGNAME: Warning Forcing SHELL=/bin/sh, current SHELL=$SHELL is not POSIX-sh"; SHELL="/bin/sh";;
    esac

    case "$1" in
    version)         shift; mpvc_version;;
    check-reqs)      shift; mpvc_check_requirements;;
    check-update)    shift; mpvc_check_update;;
    docs)            shift; mpvc_docs "$@";;
    licenses)        shift; mpvc_licenses "$@";;
    fetch)           shift; mpvc_fetch "$@";;
    link)            shift; mpvc_link "$@";;
    install)         shift; mpvc_install "$@";;
    uninstall)       shift; mpvc_uninstall "$@";;

    config)          shift; mpvc_config "$@";;
    config-user)     shift; PREFIX=$HOME $SHELL "$0" config;;
    config-sys)      shift; PREFIX=/usr/local $SHELL "$0" config;;

    fetch-user)      shift; PREFIX=$HOME $SHELL "$0" fetch;;
    fetch-sys)       shift; PREFIX=/usr/local $SHELL "$0" fetch;;
    link-user)       shift; PREFIX=$HOME $SHELL "$0" link;;
    install-user)    shift; PREFIX=$HOME $SHELL "$0" install;;
    install-sys)     shift; PREFIX=/usr/local $SHELL "$0" install;;

    uninstall-user)  shift; PREFIX=$HOME $SHELL "$0" uninstall;;
    uninstall-sys)   shift; PREFIX=/usr/local $SHELL "$0" uninstall;;

    *) usage;;
    esac
}

main "$@"
